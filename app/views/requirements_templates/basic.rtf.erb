<%
@doc = RTF::Document.new(RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman'))

#this is a section for defining the styles for use in the document
#those ending with _p are paragraph styles and those with _c are character styles
@styles = {}

@styles['h1_p'] = RTF::ParagraphStyle.new
@styles['h1_p'].justification = RTF::ParagraphStyle::CENTER_JUSTIFY
@styles['h1_after'] = [:line_break]
@styles['h1_c'] = RTF::CharacterStyle.new
@styles['h1_c'].bold = true
@styles['h1_c'].font = RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman')
@styles['h1_c'].font_size = 50

@styles['h2_p'] = RTF::ParagraphStyle.new
@styles['h2_p'].justification = RTF::ParagraphStyle::LEFT_JUSTIFY
@styles['h2_after'] = [:line_break]
@styles['h2_c'] = RTF::CharacterStyle.new
@styles['h2_c'].bold = true
@styles['h2_c'].font = RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman')
@styles['h2_c'].font_size = 50

@styles['h3_p'] = RTF::ParagraphStyle.new
@styles['h3_p'].justification = RTF::ParagraphStyle::LEFT_JUSTIFY
@styles['h3_after'] = [:line_break]
@styles['h3_c'] = RTF::CharacterStyle.new
@styles['h3_c'].bold = true
@styles['h3_c'].font = RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman')
@styles['h3_c'].font_size = 44

@styles['h4_p'] = RTF::ParagraphStyle.new
@styles['h4_p'].justification = RTF::ParagraphStyle::LEFT_JUSTIFY
@styles['h4_after'] = [:line_break]
@styles['h4_c'] = RTF::CharacterStyle.new
@styles['h4_c'].bold = true
@styles['h4_c'].font = RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman')
@styles['h4_c'].font_size = 36

@styles['question_brief_p'] = RTF::ParagraphStyle.new
@styles['question_brief_p'].justification = RTF::ParagraphStyle::LEFT_JUSTIFY
@styles['question_brief_after'] = [:line_break]
@styles['question_brief_c'] = RTF::CharacterStyle.new
@styles['question_brief_c'].bold = true
@styles['question_brief_c'].font = RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman')
@styles['question_brief_c'].font_size = 30

@styles['question_full_p'] = RTF::ParagraphStyle.new
@styles['question_full_p'].justification = RTF::ParagraphStyle::LEFT_JUSTIFY
@styles['question_full_after'] = [:line_break, :line_break]
@styles['question_full_c'] = RTF::CharacterStyle.new
@styles['question_full_c'].bold = false
@styles['question_full_c'].font = RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman')
@styles['question_full_c'].font_size = 30

@styles['answer_p'] = RTF::ParagraphStyle.new
@styles['answer_p'].justification = RTF::ParagraphStyle::LEFT_JUSTIFY
@styles['answer_after'] = [:line_break]
@styles['answer_c'] = RTF::CharacterStyle.new
@styles['answer_c'].bold = false
@styles['answer_c'].font = RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman')
@styles['answer_c'].font_size = 30


# a helper function so I don't have to nest so many levels for items that have
# both a Paragraph and a character style.  par is the parent and s is the style
def style(par, s)
	#makes it easier to apply styles that are both paragraph and character styles at once
	if @styles.has_key?("#{s}_p") && @styles.has_key?("#{s}_c")
		par.paragraph(@styles["#{s}_p"]) do |p|
   		p.apply(@styles["#{s}_c"]) do |c|
      	yield(c)
      	@styles["#{s}_after"].each{|i| c.send(i)} if @styles.has_key?("#{s}_after")
   		end
		end
	elsif @styles.has_key?("#{s}_p")
		par.paragraph(@styles["#{s}_p"]) do |p|
      yield(p)
      @styles["#{s}_after"].each{|i| c.send(i)} if @styles.has_key?("#{s}_after")
		end
	elsif @styles.has_key?('#{s}_c')
		#not sure if this one will work with style without a paragraph?  DANGER!!!
		par.apply(@styles["#{s}_c"]) do |c|
      yield(c)
      @styles["#{s}_after"].each{|i| c.send(i)} if @styles.has_key?("#{s}_after")
		end
	end
end

style(@doc, 'h1'){|s| s << @rt.name }
style(@doc, 'h1'){|s| s << @rt.institution.full_name }

=begin

style(@doc, 'h1'){|s| s << 'h1 example'}
style(@doc, 'h2'){|s| s << 'h2 example'}
style(@doc, 'h3'){|s| s << 'h3 example'}
style(@doc, 'h4'){|s| s << 'h4 example'}

style(@doc, 'question_brief'){|s| s << 'question example'}

style(@doc, 'answer'){|s| s << 'answer example'}
=end

#recursive function to output outline levels and questions/detailed
#create a level in the tree, r is the requirement nodes for this level
#and par is the parent node in the RTF document to begin write into.
def create_level(nodes, par)
	nodes.each do |node|
		if node.group #this is a heading for the group level
			style(par, "h#{node.depth+2}"){|s| s << node.text_brief }
		else
			style(par, "question_brief"){|s| s << node.text_brief }
			style(par, "question_full"){|s| s << node.text_brief }
		end
		create_level(node.children, par) if node.has_children?
	end
end


create_level(@rt.requirements.roots, @doc)

#@doc.paragraph do |p|
#	 p << "This is the first sentence in the paragraph. "
#	 p << "This is the second sentence in the paragraph. "
#	 p << "And this is the third sentence in the paragraph. Iñtërnâtiônàlizætiøn"
#end






-%><%= raw(@doc.to_rtf) %>
 
