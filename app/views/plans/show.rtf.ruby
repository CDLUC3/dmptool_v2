# -*- mode: ruby -*-
require 'nokogiri'
require 'rtf'

# doc, node, styles
def render_html(doc, n, char_styles = RTF::CharacterStyle.new, para_styles = RTF::ParagraphStyle.new)

  case n.name
    when 'document', 'html', 'body'
      n.children.each do |c|
        render_html(doc, c, RTF::CharacterStyle.new, RTF::ParagraphStyle.new)
      end

    when 'p'
      doc.paragraph(paragraph(para_styles)) do |p|
        n.children.each do |c|
          render_html(p, c, char_styles, para_styles)
        end
      end
    when 'sup', 'strong', 'b', 'sub', 'em', 's'
      char_styles = self.send(n.name, char_styles)
      n.children.each do |child|
        render_html(doc, child, char_styles, para_styles)
      end

    when 'u' # I had to do this separately, since def the function 'u' was producing conflicts of some kind.
      char_styles = underline(char_styles)
      n.children.each do |child|
        render_html(doc, child, char_styles, para_styles)
      end


    when 'text'
      return if n.text.gsub(/[\r\n\t]/, ' ').blank?
      doc.apply(char_styles) do |style|
        style << n.text.gsub(/[\r\n\t]/, ' ')
      end

    when 'ul'
      doc.list :bullets do |l|
        n.children.each do |c|
          render_html(l, c, char_styles, para_styles)
        end
      end

    when 'ol'
      doc.list :decimal do |l|
        n.children.each do |c|
          render_html(l, c, char_styles, para_styles)
        end
      end

    when 'li'
      doc.item do |i|
        n.children.each do |c|
          render_html(i, c, char_styles, para_styles)
        end
      end

    when 'hr'
      doc.table(1,1) do |t|
        style = RTF::ParagraphStyle.new
        style.space_after = 0

        cell = t.first.first
        cell.style = style
        cell.top_border_width = 0
        cell.left_border_width = 0
        cell.right_border_width = 0
        cell.bottom_border_width = 0
      end
      doc.line_break

    when 'br'
      doc.line_break

    when 'a'
      doc.link(n.attributes['href'].value, n.text.gsub(/[\r\n\t]/, ' '))
      #doc.apply(styles['u'.intern]) do |c|
      #  c << n.text.gsub(/[\r\n\t]/, ' ')
      #end
      #doc << " ("
      #doc.apply(styles['u'.intern]) do |c|
      #  c << n.attributes['href'].value
      #end
      #doc << ")"

    else
      doc << n.text.gsub(/[\r\n\t]/, '')
  end
end

def bold(char_style)
  style = char_style.clone
  style.bold = true
  style
end

def footer(para_style)
  style = para_style.clone
  style.justification = RTF::ParagraphStyle::CENTER_JUSTIFY
  style
end

def requirement_heading(para_style)
  para_style.clone
end

def title(para_style)
  style = para_style.clone
  style.justification = RTF::ParagraphStyle::CENTER_JUSTIFY
  style
end

def title_char(char_style)
  style = char_style.clone
  style.font_size = 36
  style
end

def sup(char_style)
  style = char_style.clone
  style.superscript = true
  style
end

def sub(char_style)
  style = char_style.clone
  style.subscript = true
  style
end

alias b bold

alias strong bold

def em(char_style)
  style = char_style.clone
  style.italic = true
  style
end

def underline(char_style)
  style = char_style.clone
  style.underline = true
  style
end

def s(char_style)
  style = char_style.clone
  style.strike = true
  style
end

def paragraph(para_style)
  style = para_style.clone
  style.space_before = 100
  style.space_after = 200
  style
end

def print_responses(doc, requirement, heading)
  doc.paragraph(requirement_heading(RTF::ParagraphStyle.new)) do |r|
    r << "#{heading}"
    r.apply(strong(RTF::CharacterStyle.new)) do |b|
      b << requirement.text_brief.to_s
    end
  end
  if requirement.children.size > 0 then
    requirement.children.order(:position).each_with_index do |child, i|
      print_responses(doc, child, "") #without numbering
    end
  else
    html = Nokogiri::HTML(requirement.response_html(@plan))
    render_html(doc, html)
  end
end


doc = RTF::Document.new(RTF::Font.new(RTF::Font::ROMAN, 'Times New Roman'))
doc.paragraph(title(RTF::ParagraphStyle.new)) do |p|
  p.apply(title_char(RTF::CharacterStyle.new)) do |t|
    t << @plan.name
  end
end
@plan.requirements_template.requirements.order(:position).roots.each_with_index do |req, i|
  print_responses(doc, req, "") #without numbering
end
footer = doc.footer=RTF::FooterNode.new(doc)
footer.paragraph(footer(RTF::ParagraphStyle.new)) do |p|
  p << "Generated by the DMPTool on #{Time.now.to_formatted_s(:long)}"
end
doc.to_rtf