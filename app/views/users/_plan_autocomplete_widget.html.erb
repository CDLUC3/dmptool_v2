<%
#	THIS PARTIAL TAKES LOCALS from the caller:
#	user_context -- The context the autocomplete should pull users for (the numbers for our roles 1 to 5).
#                 We need this since template editors can add other template editors, etc,
#                 so the available people in the user list may vary by the current user role and also
#                 the context to which the user can be added.  Depending on context, some users may
#                 show up in the list and some may not.
#	user_role -- The role of the user-form. such as "template_editor."
#	             Used to create unique ids and names of elements if more than one user autocomplete on a page
#	submit_text -- the text to show on the submit button
#	submit_url -- the URL to submit the form to once a user has been filled in
# role_number -- the role number to be added.  This is for form submission and also
#                may change the list of users displayed.
#                This is because template editors can add other template editors, etc,
#                so the available people in the user list may vary by the current user role and also
#                the role to which the user will be added.  Depending on context, some users may
#                show up in the list and some may not and it differs by role.
# item_description --  the name of the role to be used in messages such as 'template editor'
%>

<script>
	// based on example at http://jqueryui.com/autocomplete/#remote-jsonp
	$(function() {
		function split( val ) {
			return val.split( /,\s*/ );
			}
			function extractLast( term ) {
			return split( term ).pop();
			}

	  $( "#<%= user_role %>_name" )
		.bind( "keydown", function( event ) {
			if ( event.keyCode === $.ui.keyCode.TAB &&
			$( this ).data( "ui-autocomplete" ).menu.active ) {
			event.preventDefault();
			}
		})
	  .autocomplete({
	    source: function( request, response ) {
	      $.ajax({
	        url: "<%=autocomplate_users_plans_path%>",
	        dataType: "json",
	        data: {
	          name_term: extractLast( request.term )
	        },
	        success: function( data ) {
	          response( $.map( data, function( item ) {
	            return {
	              label: item.label,
	              value: item.full_name
	            }
	          }
	          ));
	        }
	      });
	    },
	    minLength: 1,
	    focus: function() {
				// prevent value inserted on focus
				return false;
			},
	    select: function( event, ui ) {
	    	var terms = split( this.value );
				// remove the current input
				terms.pop();
				// add the selected item
				terms.push( ui.item.label );
				// add placeholder to get the comma-and-space at the end
				terms.push( "" );
				this.value = terms.join( ", " );
				return false;
	    },
	    open: function() {
	      $( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
	    },
	    close: function() {
	    	return false;
	      $( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
	    }
	  });
	});
</script>

<div class="control-group">
    <%= label_tag "#{user_role}_name", "Add Co-owners:", :class => "control-label" %>
    <div class="controls">
  		<%= text_field_tag("#{user_role}_name", nil, placeholder: "Add co-owners; search by name or email address", :class => 'input-xxlarge') %>
  		<%= content_tag(:span, '', :title => 'Co-owners you designate will have read/write access to this DMP. Co-owners must have already logged into the DMPTool to be added to a plan.', 'data-toggle' => 'tooltip', 'data-placement' => 'right', 'data-html' => 'true', :class => 'icon questionmark tip') %>
			<%= hidden_field_tag "item_description", item_description %>
		</div>
</div>